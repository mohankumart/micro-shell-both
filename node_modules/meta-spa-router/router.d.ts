export interface MetaRoute {
    /** Path the meta router uses */
    path: string;
    /** entry point of the routed client app */
    app: string;
    /** id of the HtmlElement used as outlet. Default: outlet */
    outlet: string;
}
export declare type HandleNotification = (tag: string, data: any) => void;
export interface MetaRouterConfig {
    hashPrefix: string;
    additionalHeight: number;
    handleNotification: HandleNotification;
    allowedOrigins: string;
}
/**
 * MetaRouter for routing between micro frontends
 */
export declare class MetaRouter {
    additionalConfig: MetaRouterConfig;
    activatedRoute: MetaRoute;
    private routes;
    private urlParser;
    config(routes: MetaRoute[]): void;
    /**
     * initializes the router after configuring it
     */
    init(): void;
    /**
     * Preloads all the micro frontends by loading them into the page
     */
    preload(): void;
    /**
     * Navigates to a configured meta route
     * @param path path of the routed client app
     * @param subRoute subRoute passed to the client app
     */
    go(path: string, subRoute?: string): void;
    private handleMessage(event);
    private resizeIframe(appPath, height);
    private ensureIframeCreated(route, subRoute?);
    private activateRoute(routeToActivate, subRoute?);
    private setRouteInHash(routeToActivate, subRoute?);
    private parseHash();
    private persistUrl(routes);
    private getIframe(route);
    private getOutlet(route);
    private routeByUrl();
}
